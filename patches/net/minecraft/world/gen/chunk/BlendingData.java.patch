--- a/net/minecraft/world/gen/chunk/BlendingData.java	1970-01-12 08:58:04
+++ b/net/minecraft/world/gen/chunk/BlendingData.java	2023-03-30 20:05:23
@@ -54,7 +54,7 @@
    private final List<List<RegistryEntry<Biome>>> biomes;
    private final transient double[][] collidableBlockDensities;
    private static final Codec<double[]> DOUBLE_ARRAY_CODEC = Codec.DOUBLE.listOf().xmap(Doubles::toArray, Doubles::asList);
-   public static final Codec<BlendingData> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_section").forGetter((blendingData) -> blendingData.oldHeightLimit.getBottomSectionCoord()), Codec.INT.fieldOf("max_section").forGetter((blendingData) -> blendingData.oldHeightLimit.getTopSectionCoord()), DOUBLE_ARRAY_CODEC.optionalFieldOf("heights").forGetter((blendingData) -> DoubleStream.of(blendingData.surfaceHeights).anyMatch((height) -> height != Double.MAX_VALUE) ? Optional.of(blendingData.surfaceHeights) : Optional.empty())).apply(instance, BlendingData::new)).comapFlatMap(BlendingData::validate, Function.identity());
+   public static final Codec<BlendingData> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_section").forGetter((blendingData) -> ((BlendingData)blendingData).oldHeightLimit.getBottomSectionCoord()), Codec.INT.fieldOf("max_section").forGetter((blendingData) -> ((BlendingData)blendingData).oldHeightLimit.getTopSectionCoord()), DOUBLE_ARRAY_CODEC.optionalFieldOf("heights").forGetter((blendingData) -> DoubleStream.of(((BlendingData)blendingData).surfaceHeights).anyMatch((height) -> height != Double.MAX_VALUE) ? Optional.of(((BlendingData)blendingData).surfaceHeights) : Optional.empty())).apply(instance, BlendingData::new)).comapFlatMap(blendingData -> validate(((BlendingData)blendingData)), Function.identity());
 
    private static DataResult<BlendingData> validate(BlendingData data) {
       return data.surfaceHeights.length != HORIZONTAL_BIOME_COUNT ? DataResult.error(() -> "heights has to be of length " + HORIZONTAL_BIOME_COUNT) : DataResult.success(data);
@@ -63,7 +63,7 @@
    private BlendingData(int oldBottomSectionY, int oldTopSectionY, Optional<double[]> heights) {
       this.surfaceHeights = (double[])heights.orElse(Util.make(new double[HORIZONTAL_BIOME_COUNT], (heights2) -> Arrays.fill(heights2, Double.MAX_VALUE)));
       this.collidableBlockDensities = new double[HORIZONTAL_BIOME_COUNT][];
-      ObjectArrayList<List<RegistryEntry<Biome>>> objectArrayList = new ObjectArrayList(HORIZONTAL_BIOME_COUNT);
+      ObjectArrayList<List<RegistryEntry<Biome>>> objectArrayList = new ObjectArrayList<>(HORIZONTAL_BIOME_COUNT);
       objectArrayList.size(HORIZONTAL_BIOME_COUNT);
       this.biomes = objectArrayList;
       int i = ChunkSectionPos.getBlockCoord(oldBottomSectionY);
