--- a/net/minecraft/world/event/listener/VibrationListener.java	2023-03-30 19:29:24
+++ b/net/minecraft/world/event/listener/VibrationListener.java	2023-03-30 19:29:44
@@ -84,7 +84,7 @@
    private final VibrationSelector selector;
 
    public static Codec<VibrationListener> createCodec(VibrationListener.Callback callback) {
-      return RecordCodecBuilder.create((instance) -> instance.group(PositionSource.CODEC.fieldOf("source").forGetter((listener) -> listener.positionSource), Codecs.NONNEGATIVE_INT.fieldOf("range").forGetter((listener) -> listener.range), Vibration.CODEC.optionalFieldOf("event").forGetter((listener) -> Optional.ofNullable(listener.vibration)), VibrationSelector.CODEC.fieldOf("selector").forGetter((listener) -> listener.selector), Codecs.NONNEGATIVE_INT.fieldOf("event_delay").orElse(0).forGetter((listener) -> listener.delay)).apply(instance, (positionSource, range, vibration, selector, delay) -> new VibrationListener(positionSource, range, callback, (Vibration)vibration.orElse((Object)null), selector, delay)));
+      return RecordCodecBuilder.create((instance) -> instance.group(PositionSource.CODEC.fieldOf("source").forGetter((listener) -> listener.positionSource), Codecs.NONNEGATIVE_INT.fieldOf("range").forGetter((listener) -> listener.range), Vibration.CODEC.optionalFieldOf("event").forGetter((listener) -> Optional.ofNullable(listener.vibration)), VibrationSelector.CODEC.fieldOf("selector").forGetter((listener) -> listener.selector), Codecs.NONNEGATIVE_INT.fieldOf("event_delay").orElse(0).forGetter((listener) -> listener.delay)).apply(instance, (positionSource, range, vibration, selector, delay) -> new VibrationListener(positionSource, range, callback, (Vibration)vibration.orElse(null), selector, delay)));
    }
 
    private VibrationListener(PositionSource positionSource, int range, VibrationListener.Callback callback, @Nullable Vibration vibration, VibrationSelector selector, int delay) {
@@ -121,7 +121,7 @@
             --this.delay;
             if (this.delay <= 0) {
                this.delay = 0;
-               this.callback.accept(serverWorld, this, BlockPos.ofFloored(this.vibration.pos()), this.vibration.gameEvent(), (Entity)this.vibration.getEntity(serverWorld).orElse((Object)null), (Entity)this.vibration.getOwner(serverWorld).orElse((Object)null), this.vibration.distance());
+               this.callback.accept(serverWorld, this, BlockPos.ofFloored(this.vibration.pos()), this.vibration.gameEvent(), (Entity)this.vibration.getEntity(serverWorld).orElse(null), (Entity)this.vibration.getOwner(serverWorld).orElse(null), this.vibration.distance());
                this.vibration = null;
             }
          }
