--- a/net/minecraft/world/dimension/DimensionOptionsRegistryHolder.java
+++ b/net/minecraft/world/dimension/DimensionOptionsRegistryHolder.java
@@ -36,7 +36,7 @@
    private static final int VANILLA_KEY_COUNT = VANILLA_KEYS.size();
 
    public DimensionOptionsRegistryHolder {
-      DimensionOptions dimensionOptions = (DimensionOptions)registry.get(DimensionOptions.OVERWORLD);
+      DimensionOptions dimensionOptions = (DimensionOptions)dimensions.get(DimensionOptions.OVERWORLD);
       if (dimensionOptions == null) {
          throw new IllegalStateException("Overworld settings missing");
       }
@@ -169,23 +169,21 @@
       return false;
    }
 
+   record Entry(RegistryKey<DimensionOptions> key, DimensionOptions value) {
+
+      Lifecycle getLifecycle() {
+         return DimensionOptionsRegistryHolder.getLifecycle(this.key, this.value);
+      }
+   }
+
    public DimensionOptionsRegistryHolder.DimensionsConfig toConfig(Registry<DimensionOptions> existingRegistry) {
       Stream<RegistryKey<DimensionOptions>> stream = Stream.concat(existingRegistry.getKeys().stream(), this.dimensions.getKeys().stream()).distinct();
-      List<Entry> list = new ArrayList();
+      List<Entry> list = new ArrayList<>();
       streamAll(stream).forEach((key) -> existingRegistry.getOrEmpty(key).or(() -> this.dimensions.getOrEmpty(key)).ifPresent((dimensionOptions) -> {
-            record Entry(RegistryKey<DimensionOptions> key, DimensionOptions value) {
-               final RegistryKey<DimensionOptions> key;
-               final DimensionOptions value;
-
-               Lifecycle getLifecycle() {
-                  return DimensionOptionsRegistryHolder.getLifecycle(this.key, this.value);
-               }
-            }
-
             list.add(new Entry(key, dimensionOptions));
          }));
       Lifecycle lifecycle = list.size() == VANILLA_KEY_COUNT ? Lifecycle.stable() : Lifecycle.experimental();
-      MutableRegistry<DimensionOptions> mutableRegistry = new SimpleRegistry(RegistryKeys.DIMENSION, lifecycle);
+      MutableRegistry<DimensionOptions> mutableRegistry = new SimpleRegistry<>(RegistryKeys.DIMENSION, lifecycle);
       list.forEach((entry) -> mutableRegistry.add(entry.key, entry.value, entry.getLifecycle()));
       Registry<DimensionOptions> registry = mutableRegistry.freeze();
       LevelProperties.SpecialProperty specialProperty = getSpecialProperty(registry);
@@ -201,4 +199,4 @@
          return (new DynamicRegistryManager.ImmutableImpl(List.of(this.dimensions))).toImmutable();
       }
    }
-}
+}
\ No newline at end of file
