--- a/net/minecraft/registry/tag/TagGroupLoader.java	2023-03-30 19:29:26
+++ b/net/minecraft/registry/tag/TagGroupLoader.java	2023-03-30 21:03:20
@@ -47,14 +47,14 @@
          Identifier identifier = (Identifier)entry.getKey();
          Identifier identifier2 = resourceFinder.toResourceId(identifier);
 
-         for(Resource resource : (List)entry.getValue()) {
+         for(Resource resource : entry.getValue()) {
             try {
                Reader reader = resource.getReader();
 
                try {
                   JsonElement jsonElement = JsonParser.parseReader(reader);
                   List<TagGroupLoader.TrackedEntry> list = (List)map.computeIfAbsent(identifier2, (id) -> new ArrayList());
-                  TagFile tagFile = (TagFile)TagFile.CODEC.parse(new Dynamic(JsonOps.INSTANCE, jsonElement)).getOrThrow(false, LOGGER::error);
+                  TagFile tagFile = (TagFile)TagFile.CODEC.parse(new Dynamic(JsonOps.INSTANCE, jsonElement)).getOrThrow(false, a -> LOGGER.error((String) a));
                   if (tagFile.replace()) {
                      list.clear();
                   }
@@ -126,7 +126,7 @@
       TagEntry.ValueGetter<T> valueGetter = new TagEntry.ValueGetter<T>() {
          @Nullable
          public T direct(Identifier id) {
-            return (T)((Optional)TagGroupLoader.this.registryGetter.apply(id)).orElse((Object)null);
+            return (T)((Optional)TagGroupLoader.this.registryGetter.apply(id)).orElse(null);
          }
 
          @Nullable
@@ -147,10 +147,9 @@
    }
 
    public static record TrackedEntry(TagEntry entry, String source) {
-      final TagEntry entry;
 
       public String toString() {
          return this.entry + " (from " + this.source + ")";
       }
    }
-}
+}
\ No newline at end of file
