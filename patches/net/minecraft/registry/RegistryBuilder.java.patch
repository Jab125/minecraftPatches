--- a/net/minecraft/registry/RegistryBuilder.java
+++ b/net/minecraft/registry/RegistryBuilder.java
@@ -100,9 +100,6 @@
    }
 
    static record InitializedRegistry<T>(RegistryKey<? extends Registry<? extends T>> key, Lifecycle lifecycle, Map<RegistryKey<T>, RegistryBuilder.EntryAssociatedValue<T>> values) {
-      final RegistryKey<? extends Registry<? extends T>> key;
-      final Lifecycle lifecycle;
-      final Map<RegistryKey<T>, RegistryBuilder.EntryAssociatedValue<T>> values;
 
       public RegistryWrapper.Impl<T> toWrapper() {
          return new RegistryWrapper.Impl<T>() {
@@ -141,14 +138,9 @@
    }
 
    static record RegisteredValue<T>(T value, Lifecycle lifecycle) {
-      final T value;
    }
 
    static record Registries(RegistryBuilder.AnyOwner owner, RegistryBuilder.StandAloneEntryCreatingLookup lookup, Map<Identifier, RegistryEntryLookup<?>> registries, Map<RegistryKey<?>, RegistryBuilder.RegisteredValue<?>> registeredValues, List<RuntimeException> errors) {
-      final RegistryBuilder.StandAloneEntryCreatingLookup lookup;
-      final Map<Identifier, RegistryEntryLookup<?>> registries;
-      final Map<RegistryKey<?>, RegistryBuilder.RegisteredValue<?>> registeredValues;
-      final List<RuntimeException> errors;
 
       public static RegistryBuilder.Registries of(DynamicRegistryManager dynamicRegistryManager, Stream<RegistryKey<? extends Registry<?>>> registryRefs) {
          RegistryBuilder.AnyOwner anyOwner = new RegistryBuilder.AnyOwner();
@@ -261,4 +253,4 @@
          return (RegistryEntry.Reference)this.keysToEntries.computeIfAbsent(key, (key2) -> RegistryEntry.Reference.standAlone(this.entryOwner, key2));
       }
    }
-}
+}
\ No newline at end of file
