--- a/net/minecraft/registry/RegistryBuilder.java
+++ b/net/minecraft/registry/RegistryBuilder.java
@@ -100,15 +100,12 @@
    }
 
    static record InitializedRegistry<T>(RegistryKey<? extends Registry<? extends T>> key, Lifecycle lifecycle, Map<RegistryKey<T>, RegistryBuilder.EntryAssociatedValue<T>> values) {
-      final RegistryKey<? extends Registry<? extends T>> key;
-      final Lifecycle lifecycle;
-      final Map<RegistryKey<T>, RegistryBuilder.EntryAssociatedValue<T>> values;
 
       public RegistryWrapper.Impl<T> toWrapper() {
          return new RegistryWrapper.Impl<T>() {
-            private final Map<RegistryKey<T>, RegistryEntry.Reference<T>> keysToEntries = (Map)InitializedRegistry.this.values.entrySet().stream().collect(Collectors.toUnmodifiableMap(Map.Entry::getKey, (entry) -> {
-               RegistryBuilder.EntryAssociatedValue<T> entryAssociatedValue = (RegistryBuilder.EntryAssociatedValue)entry.getValue();
-               RegistryEntry.Reference<T> reference = (RegistryEntry.Reference)entryAssociatedValue.entry().orElseGet(() -> RegistryEntry.Reference.standAlone(this, (RegistryKey)entry.getKey()));
+            private final Map<RegistryKey<T>, RegistryEntry.Reference<T>> keysToEntries = InitializedRegistry.this.values.entrySet().stream().collect(Collectors.toUnmodifiableMap(Map.Entry::getKey, (entry) -> {
+               RegistryBuilder.EntryAssociatedValue<T> entryAssociatedValue = entry.getValue();
+               RegistryEntry.Reference<T> reference = entryAssociatedValue.entry().orElseGet(() -> RegistryEntry.Reference.standAlone(this, entry.getKey()));
                reference.setValue(entryAssociatedValue.value().value());
                return reference;
             }));
@@ -122,7 +119,7 @@
             }
 
             public Optional<RegistryEntry.Reference<T>> getOptional(RegistryKey<T> key) {
-               return Optional.ofNullable((RegistryEntry.Reference)this.keysToEntries.get(key));
+               return Optional.ofNullable(this.keysToEntries.get(key));
             }
 
             public Stream<RegistryEntry.Reference<T>> streamEntries() {
@@ -141,14 +138,9 @@
    }
 
    static record RegisteredValue<T>(T value, Lifecycle lifecycle) {
-      final T value;
    }
 
    static record Registries(RegistryBuilder.AnyOwner owner, RegistryBuilder.StandAloneEntryCreatingLookup lookup, Map<Identifier, RegistryEntryLookup<?>> registries, Map<RegistryKey<?>, RegistryBuilder.RegisteredValue<?>> registeredValues, List<RuntimeException> errors) {
-      final RegistryBuilder.StandAloneEntryCreatingLookup lookup;
-      final Map<Identifier, RegistryEntryLookup<?>> registries;
-      final Map<RegistryKey<?>, RegistryBuilder.RegisteredValue<?>> registeredValues;
-      final List<RuntimeException> errors;
 
       public static RegistryBuilder.Registries of(DynamicRegistryManager dynamicRegistryManager, Stream<RegistryKey<? extends Registry<?>>> registryRefs) {
          RegistryBuilder.AnyOwner anyOwner = new RegistryBuilder.AnyOwner();
@@ -207,9 +199,9 @@
 
          while(iterator.hasNext()) {
             Map.Entry<RegistryKey<Object>, RegistryEntry.Reference<Object>> entry = (Map.Entry)iterator.next();
-            RegistryKey<Object> registryKey = (RegistryKey)entry.getKey();
-            RegistryEntry.Reference<Object> reference = (RegistryEntry.Reference)entry.getValue();
-            ((Optional)map.computeIfAbsent(registryKey.getRegistry(), (registryId) -> lookup.getOptionalWrapper(RegistryKey.ofRegistry(registryId)))).flatMap((entryLookup) -> entryLookup.getOptional(registryKey)).ifPresent((entryx) -> {
+            RegistryKey<Object> registryKey = entry.getKey();
+            RegistryEntry.Reference<Object> reference = entry.getValue();
+            map.computeIfAbsent(registryKey.getRegistry(), (registryId) -> lookup.getOptionalWrapper(RegistryKey.ofRegistry(registryId))).flatMap((entryLookup) -> entryLookup.getOptional(registryKey)).ifPresent((entryx) -> {
                reference.setValue(entryx.value());
                iterator.remove();
             });
@@ -232,12 +224,12 @@
          Iterator<Map.Entry<RegistryKey<?>, RegistryBuilder.RegisteredValue<?>>> iterator = registries.registeredValues.entrySet().iterator();
 
          while(iterator.hasNext()) {
-            Map.Entry<RegistryKey<?>, RegistryBuilder.RegisteredValue<?>> entry = (Map.Entry)iterator.next();
-            RegistryKey<?> registryKey = (RegistryKey)entry.getKey();
+            Map.Entry<RegistryKey<?>, RegistryBuilder.RegisteredValue<?>> entry = iterator.next();
+            RegistryKey<?> registryKey = entry.getKey();
             if (registryKey.isOf(this.key)) {
-               RegistryBuilder.RegisteredValue<T> registeredValue = (RegistryBuilder.RegisteredValue)entry.getValue();
-               RegistryEntry.Reference<T> reference = (RegistryEntry.Reference)registries.lookup.keysToEntries.remove(registryKey);
-               map.put(registryKey, new RegistryBuilder.EntryAssociatedValue<T>(registeredValue, Optional.ofNullable(reference)));
+               RegistryBuilder.RegisteredValue<T> registeredValue = (RegistryBuilder.RegisteredValue<T>)entry.getValue();
+               RegistryEntry.Reference<T> reference = (RegistryEntry.Reference<T>)registries.lookup.keysToEntries.remove(registryKey);
+               map.put((RegistryKey<T>) registryKey, new RegistryBuilder.EntryAssociatedValue<T>(registeredValue, Optional.ofNullable(reference)));
                iterator.remove();
             }
          }
@@ -258,7 +250,7 @@
       }
 
       <T> RegistryEntry.Reference<T> getOrCreate(RegistryKey<T> key) {
-         return (RegistryEntry.Reference)this.keysToEntries.computeIfAbsent(key, (key2) -> RegistryEntry.Reference.standAlone(this.entryOwner, key2));
+         return (RegistryEntry.Reference)this.keysToEntries.computeIfAbsent((RegistryKey<Object>) key, (key2) -> RegistryEntry.Reference.standAlone(this.entryOwner, key2));
       }
    }
-}
+}
\ No newline at end of file
