--- a/net/minecraft/util/math/intprovider/BiasedToBottomIntProvider.java	1970-01-12 08:58:04
+++ b/net/minecraft/util/math/intprovider/BiasedToBottomIntProvider.java	2023-03-30 21:03:20
@@ -7,7 +7,7 @@
 import net.minecraft.util.math.random.Random;
 
 public class BiasedToBottomIntProvider extends IntProvider {
-   public static final Codec<BiasedToBottomIntProvider> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((provider) -> provider.min), Codec.INT.fieldOf("max_inclusive").forGetter((provider) -> provider.max)).apply(instance, BiasedToBottomIntProvider::new)).comapFlatMap((provider) -> provider.max < provider.min ? DataResult.error(() -> "Max must be at least min, min_inclusive: " + provider.min + ", max_inclusive: " + provider.max) : DataResult.success(provider), Function.identity());
+   public static final Codec<BiasedToBottomIntProvider> CODEC = RecordCodecBuilder.<BiasedToBottomIntProvider>create((instance) -> instance.group(Codec.INT.fieldOf("min_inclusive").forGetter((provider) -> provider.min), Codec.INT.fieldOf("max_inclusive").forGetter((provider) -> provider.max)).apply(instance, BiasedToBottomIntProvider::new)).comapFlatMap((provider) -> provider.max < provider.min ? DataResult.error(() -> "Max must be at least min, min_inclusive: " + provider.min + ", max_inclusive: " + provider.max) : DataResult.success(provider), Function.identity());
    private final int min;
    private final int max;
 
