--- a/net/minecraft/util/math/floatprovider/UniformFloatProvider.java
+++ b/net/minecraft/util/math/floatprovider/UniformFloatProvider.java
@@ -8,7 +8,7 @@
 import net.minecraft.util.math.random.Random;
 
 public class UniformFloatProvider extends FloatProvider {
-   public static final Codec<UniformFloatProvider> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((provider) -> provider.min), Codec.FLOAT.fieldOf("max_exclusive").forGetter((provider) -> provider.max)).apply(instance, UniformFloatProvider::new)).comapFlatMap((provider) -> provider.max <= provider.min ? DataResult.error(() -> "Max must be larger than min, min_inclusive: " + provider.min + ", max_exclusive: " + provider.max) : DataResult.success(provider), Function.identity());
+   public static final Codec<UniformFloatProvider> CODEC = RecordCodecBuilder.<UniformFloatProvider>create((instance) -> instance.group(Codec.FLOAT.fieldOf("min_inclusive").forGetter((provider) -> provider.min), Codec.FLOAT.fieldOf("max_exclusive").forGetter((provider) -> provider.max)).apply(instance, UniformFloatProvider::new)).comapFlatMap((provider) -> provider.max <= provider.min ? DataResult.error(() -> "Max must be larger than min, min_inclusive: " + provider.min + ", max_exclusive: " + provider.max) : DataResult.success(provider), Function.identity());
    private final float min;
    private final float max;
 
