--- a/net/minecraft/util/math/floatprovider/ClampedNormalFloatProvider.java	1970-01-12 08:58:04
+++ b/net/minecraft/util/math/floatprovider/ClampedNormalFloatProvider.java	2023-03-30 21:03:20
@@ -8,7 +8,7 @@
 import net.minecraft.util.math.random.Random;
 
 public class ClampedNormalFloatProvider extends FloatProvider {
-   public static final Codec<ClampedNormalFloatProvider> CODEC = RecordCodecBuilder.create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((provider) -> provider.mean), Codec.FLOAT.fieldOf("deviation").forGetter((provider) -> provider.deviation), Codec.FLOAT.fieldOf("min").forGetter((provider) -> provider.min), Codec.FLOAT.fieldOf("max").forGetter((provider) -> provider.max)).apply(instance, ClampedNormalFloatProvider::new)).comapFlatMap((provider) -> provider.max < provider.min ? DataResult.error(() -> "Max must be larger than min: [" + provider.min + ", " + provider.max + "]") : DataResult.success(provider), Function.identity());
+   public static final Codec<ClampedNormalFloatProvider> CODEC = RecordCodecBuilder.<ClampedNormalFloatProvider>create((instance) -> instance.group(Codec.FLOAT.fieldOf("mean").forGetter((provider) -> provider.mean), Codec.FLOAT.fieldOf("deviation").forGetter((provider) -> provider.deviation), Codec.FLOAT.fieldOf("min").forGetter((provider) -> provider.min), Codec.FLOAT.fieldOf("max").forGetter((provider) -> provider.max)).apply(instance, ClampedNormalFloatProvider::new)).comapFlatMap((provider) -> provider.max < provider.min ? DataResult.error(() -> "Max must be larger than min: [" + provider.min + ", " + provider.max + "]") : DataResult.success(provider), Function.identity());
    private final float mean;
    private final float deviation;
    private final float min;
