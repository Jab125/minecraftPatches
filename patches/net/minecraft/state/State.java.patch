--- a/net/minecraft/state/State.java	1970-01-12 08:58:04
+++ b/net/minecraft/state/State.java	2023-03-30 20:05:23
@@ -97,7 +97,7 @@
 
    public <T extends Comparable<T>> Optional<T> getOrEmpty(Property<T> property) {
       Comparable<?> comparable = (Comparable)this.entries.get(property);
-      return comparable == null ? Optional.empty() : Optional.of((Comparable)property.getType().cast(comparable));
+      return comparable == null ? Optional.empty() : Optional.of(property.getType().cast(comparable));
    }
 
    public <T extends Comparable<T>, V extends T> S with(Property<T> property, V value) {
@@ -164,8 +164,8 @@
 
    protected static <O, S extends State<O, S>> Codec<S> createCodec(Codec<O> codec, Function<O, S> ownerToStateFunction) {
       return codec.dispatch("Name", (state) -> state.owner, (object) -> {
-         S state = (S)(ownerToStateFunction.apply(object));
-         return state.getEntries().isEmpty() ? Codec.unit(state) : state.codec.codec().optionalFieldOf("Properties").xmap((optional) -> (State)optional.orElse(state), Optional::of).codec();
+         S state = (ownerToStateFunction.apply(object));
+         return state.getEntries().isEmpty() ? Codec.unit(state) : state.codec.codec().optionalFieldOf("Properties").xmap((optional) -> optional.orElse(state), Optional::of).codec();
       });
    }
 }
