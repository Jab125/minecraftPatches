--- a/net/minecraft/state/StateManager.java
+++ b/net/minecraft/state/StateManager.java
@@ -33,12 +33,12 @@
    protected StateManager(Function<O, S> defaultStateGetter, O owner, StateManager.Factory<O, S> factory, Map<String, Property<?>> propertiesMap) {
       this.owner = owner;
       this.properties = ImmutableSortedMap.copyOf(propertiesMap);
-      Supplier<S> supplier = () -> (State)defaultStateGetter.apply(owner);
+      Supplier<S> supplier = () -> defaultStateGetter.apply(owner);
       MapCodec<S> mapCodec = MapCodec.of(Encoder.empty(), Decoder.unit(supplier));
 
       Map.Entry<String, Property<?>> entry;
-      for(UnmodifiableIterator mapCodec2 = this.properties.entrySet().iterator(); mapCodec2.hasNext(); mapCodec = addFieldToMapCodec(mapCodec, supplier, (String)entry.getKey(), (Property)entry.getValue())) {
-         entry = (Map.Entry)mapCodec2.next();
+      for(UnmodifiableIterator<Map.Entry<String, Property<?>>> mapCodec2 = this.properties.entrySet().iterator(); mapCodec2.hasNext(); mapCodec = addFieldToMapCodec(mapCodec, supplier, (String)entry.getKey(), (Property)entry.getValue())) {
+         entry = mapCodec2.next();
       }
 
       MapCodec<S> mapCodec2 = mapCodec;
@@ -46,13 +46,15 @@
       List<S> list = Lists.newArrayList();
       Stream<List<Pair<Property<?>, Comparable<?>>>> stream = Stream.of(Collections.emptyList());
 
-      Property<?> property;
-      for(UnmodifiableIterator var11 = this.properties.values().iterator(); var11.hasNext(); stream = stream.flatMap((listx) -> property.getValues().stream().map((comparable) -> {
+      var ref = new Object() {
+         Property<?> property;
+      };
+      for(UnmodifiableIterator<Property<?>> var11 = this.properties.values().iterator(); var11.hasNext(); stream = stream.flatMap((listx) -> ref.property.getValues().stream().map((comparable) -> {
             List<Pair<Property<?>, Comparable<?>>> list2 = Lists.newArrayList(listx);
-            list2.add(Pair.of(property, comparable));
+            list2.add(Pair.of(ref.property, comparable));
             return list2;
          }))) {
-         property = (Property)var11.next();
+         ref.property = (Property)var11.next();
       }
 
       stream.forEach((list2) -> {
@@ -71,7 +73,7 @@
 
    private static <S extends State<?, S>, T extends Comparable<T>> MapCodec<S> addFieldToMapCodec(MapCodec<S> mapCodec, Supplier<S> defaultStateGetter, String key, Property<T> property) {
       return Codec.mapPair(mapCodec, property.getValueCodec().fieldOf(key).orElseGet((string) -> {
-      }, () -> property.createValue((State)defaultStateGetter.get()))).xmap((pair) -> (State)((State)pair.getFirst()).with(property, ((Property.Value)pair.getSecond()).value()), (state) -> Pair.of(state, property.createValue(state)));
+      }, () -> property.createValue(defaultStateGetter.get()))).xmap((pair) -> (pair.getFirst()).with(property, (pair.getSecond()).value()), (state) -> Pair.of(state, property.createValue(state)));
    }
 
    public ImmutableList<S> getStates() {
