--- a/net/minecraft/entity/mob/WardenEntity.java	2023-03-30 19:29:27
+++ b/net/minecraft/entity/mob/WardenEntity.java	2023-03-30 20:42:01
@@ -37,6 +37,7 @@
 import net.minecraft.entity.effect.StatusEffects;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.nbt.NbtCompound;
+import net.minecraft.nbt.NbtElement;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.network.listener.ClientPlayPacketListener;
 import net.minecraft.network.packet.Packet;
@@ -338,7 +339,7 @@
    }
 
    public Brain<WardenEntity> getBrain() {
-      return super.getBrain();
+      return (Brain<WardenEntity>) super.getBrain();
    }
 
    protected void sendAiDebugData() {
@@ -387,12 +388,12 @@
    public void readCustomDataFromNbt(NbtCompound nbt) {
       super.readCustomDataFromNbt(nbt);
       if (nbt.contains("anger")) {
-         WardenAngerManager.createCodec(this::isValidTarget).parse(new Dynamic(NbtOps.INSTANCE, nbt.get("anger"))).resultOrPartial(LOGGER::error).ifPresent((angerManager) -> this.angerManager = angerManager);
+         WardenAngerManager.createCodec(this::isValidTarget).<NbtElement>parse(new Dynamic(NbtOps.INSTANCE, nbt.get("anger"))).resultOrPartial(a -> LOGGER.error((String) a)).ifPresent((angerManager) -> this.angerManager = (WardenAngerManager) angerManager);
          this.updateAnger();
       }
 
       if (nbt.contains("listener", 10)) {
-         VibrationListener.createCodec(this).parse(new Dynamic(NbtOps.INSTANCE, nbt.getCompound("listener"))).resultOrPartial(LOGGER::error).ifPresent((vibrationListener) -> this.gameEventHandler.setListener(vibrationListener, this.world));
+         VibrationListener.createCodec(this).parse(new Dynamic(NbtOps.INSTANCE, nbt.getCompound("listener"))).resultOrPartial(a -> LOGGER.error((String) a)).ifPresent((vibrationListener) -> this.gameEventHandler.setListener((VibrationListener) vibrationListener, this.world));
       }
 
    }
@@ -424,7 +425,7 @@
    public void increaseAngerAt(@Nullable Entity entity, int amount, boolean listening) {
       if (!this.isAiDisabled() && this.isValidTarget(entity)) {
          WardenBrain.resetDigCooldown(this);
-         boolean bl = !(this.getBrain().getOptionalRegisteredMemory(MemoryModuleType.ATTACK_TARGET).orElse((Object)null) instanceof PlayerEntity);
+         boolean bl = !(this.getBrain().getOptionalRegisteredMemory(MemoryModuleType.ATTACK_TARGET).orElse(null) instanceof PlayerEntity);
          int i = this.angerManager.increaseAngerAt(entity, amount);
          if (entity instanceof PlayerEntity && bl && Angriness.getForAnger(i).isAngry()) {
             this.getBrain().forget(MemoryModuleType.ATTACK_TARGET);
@@ -443,7 +444,7 @@
 
    @Nullable
    public LivingEntity getTarget() {
-      return (LivingEntity)this.getBrain().getOptionalRegisteredMemory(MemoryModuleType.ATTACK_TARGET).orElse((Object)null);
+      return (LivingEntity)this.getBrain().getOptionalRegisteredMemory(MemoryModuleType.ATTACK_TARGET).orElse(null);
    }
 
    public boolean canImmediatelyDespawn(double distanceSquared) {
